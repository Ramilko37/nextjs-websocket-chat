import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import styles from '../styles/Home.module.css';
import { useDispatch } from 'react-redux';
import SocketIOClient from "socket.io-client";
import {addMessage, setUsername, useAppSelector} from '../store/store';
import ChatComponent from "../components/ChatComponent";


interface IMsg {
    user: string;
    message: string
}
export default function Home() {
    const router = useRouter();
    const dispatch = useDispatch();
    const username = useAppSelector((state) => state.username);
    const messages = useAppSelector(state => state.messages);
    const [inputValue, setInputValue] = useState<string | null>(null);

    const [connected, setConnected] = useState<boolean>(false);
    const [chat, setChat] = useState<IMsg[]>([]);
    const [message, setMessage] = useState<{ id: number, text: string } | null>(null);
    const [socket, setSocket] = useState(null);


    console.log(message)

    useEffect((): any => {
        // connect to socket server
        // @ts-ignore
        const newSocket = SocketIOClient.connect(process.env.BASE_URL, {
            path: "/api/socket",
        });

        setSocket(newSocket);

        // log socket connection
        newSocket.on("connect", () => {
            console.log("SOCKET CONNECTED!", newSocket.id);
            setConnected(true);
        });

        // update chat on new message dispatched
        newSocket.on("message", (message: IMsg) => {
            setChat((chat) => [...chat, message]);
        });

        // socket disconnet onUnmount if exists
        return () => newSocket.disconnect();
    }, []);

    console.log(socket)
    const handleSubmit = (e) => {
        e.preventDefault();
        dispatch(addMessage(message))
        socket.emit('message', {
            text: message,
        });


    };

    const handleLoginButton = () => {
        if (inputValue.trim()) {
            dispatch(setUsername(inputValue))
        }
    }

    const onInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
        setMessage({
            id: Date.now(),
            text: e.target.value
        });
    };

        return (
            <div className={styles.container}>
                <Head>
                    <title>Create Next App</title>
                    <meta name="description" content="Generated by create next app"/>
                    <link rel="icon" href="/favicon.ico"/>
                </Head>

                <div>
                    <h1>Welcome to the chat app!</h1>
                    <p>Please enter your name to start chatting:</p>
                    <input type="text" placeholder="Your name" value={inputValue}
                           onChange={e => setInputValue(e.target.value)}/>
                    <button onClick={handleLoginButton}>Start Chatting</button>
                    <hr/>
                    <br/>

                    <ChatComponent message={message} handleSubmit={handleSubmit} setMessage={setMessage} onInputChange={onInputChange}/>
                </div>
            </div>
        );
    };

